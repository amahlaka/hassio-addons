#!/bin/bash
APP="hzn"
API="nodes"
DEBUG="true"

if [ -z ${TMP:-} ]; then TMP="/tmpfs"; fi
if [ -z ${LOGTO:-} ]; then LOGTO=$TMP/$APP.log; fi
if [ -n ${DEBUG:-} ]; then echo $(date) "$0 $$ -- START" >> $LOGTO 2>&1; fi

if [ -z ${CU:-} ]; then CU="${HORIZON_CLOUDANT_URL}"; fi

# use the config database
DB="${APP}-config"
if [ -z ${DB:-} ]; then DB="${APP}-${API}"; fi

JQ='{"nodes":.nodes}'
if [ -z ${JQ:-} ]; then JQ='.'; fi

###
### dateutils REQUIRED
###

if [ -e /usr/bin/dateutils.dconv ]; then
   dateconv=/usr/bin/dateutils.dconv
elif [ -e /usr/bin/dateconv ]; then
   dateconv=/usr/bin/dateconv
elif [ -e /usr/local/bin/dateconv ]; then
   dateconv=/usr/local/bin/dateconv
else
  echo "No date converter; install dateutils" >> $LOGTO 2>&1
  exit 1
fi

# don't update statistics more than once per (in seconds)
TTL=30
SECONDS=$(date "+%s")
DATE=$(echo $SECONDS \/ $TTL \* $TTL | bc)

if [ -n ${QUERY_STRING:-} ]; then
    id=$(echo "$QUERY_STRING" | sed 's/.*id=\([^&]*\).*/\1/')
    if [[ $id == "$QUERY_STRING" ]]; then id=""; fi
fi

if [ -z ${id:-} ]; then id="all"; fi

# standardize QUERY_STRING (rendezvous w/ APP-make-API.csh script)
export QUERY_STRING="id=$id"

##
## ACCESS CLOUDANT
##

# output target
OUTPUT="$TMP/$APP-$API-$QUERY_STRING.$DATE.json"
# test if been-there-done-that
if [ ! -s "$OUTPUT" ]; then 
  rm -f "${OUTPUT%%.*}".*

  # find devices
  if [ $id == "all" ]; then
    if [ -n "${DEBUG:-}" ]; then echo $(date) "$0 $$ ++ Attempting to retrieve devices from ($url)" >> $LOGTO 2>&1; fi
    devices=$(curl -s -q -L "$CU/$DB/_all_docs" | jq -r '.rows[]?.id')
    if [[ -z "${devices}" ]]; then
      if [ -n "${DEBUG:-}" ]; then echo $(date) "$0 $$ ++ Could not retrieve list of devices from ($url)" >> $LOGTO 2>&1; fi
    fi
  else
    devices=$id
  fi

  if [ -n ${DEBUG:-} ]; then echo $(date) "$0 $$ ++ Devices in DB ($devices)" >> $LOGTO 2>&1; fi

  k=0
  all='{"date":'"$DATE"',"'$API'":['

  for d in $devices; do
    # get device entry
    url="$CU/$DB/$d"
    out="$TMP/$APP-$API-$$.json"
    curl -sL "$url" -o "$out"
    if [ ! -s "$out" ]; then
      if [ -n ${DEBUG:-} ]; then echo $(date) "$0 $$ ++ FAILURE ($d)" $(ls -al $out) >> $LOGTO 2>&1; fi
      rm -f "$out"
      continue
    fi
    if [ "$id" != "all" ] && [ "$d" == "$id" ]; then
      jq "${JQ}"  "$out" > "$OUTPUT"
      rm -f "$out"
      break
    elif [ $id == "all" ]; then
      json=$(jq '{"id":._id}' "$out")
      rm -f "$out"
    else
      json=""
    fi
    if [ $k -gt 0 ]; then all="$all"','; fi
    k=$((k+1))
    if [ -n "${json:-}" ]; then all="${all}${json}"; fi
  done
  all="$all"']}'
fi

if [ ! -s "${OUTPUT}" ]; then
  echo "$all" | jq -c '.' > "$OUTPUT"
fi

#
# output
#

echo "Content-Type: application/json; charset=utf-8"
echo "Access-Control-Allow-Origin: *"

if [ -z ${output:-} ] && [ -s "$OUTPUT" ]; then
  age=$((SECONDS - DATE))
  echo "Age: $age"
  refresh=$((TTL - age))
  # check back if using old
  if [ $refresh -lt 0 ]; then refresh=$TTL; fi
  echo "Refresh: $refresh"
  echo "Cache-Control: max-age=$TTL"
  echo "Last-Modified:" $($dateconv -i '%s' -f '%a, %d %b %Y %H:%M:%S %Z' $DATE)
  echo ""
  jq -c '.date='"${DATE}" "$OUTPUT"
  if [ -n ${DEBUG:-} ]; then echo $(date) "$0 $$ -- output $OUTPUT Age: $age Refresh: $refresh" >> $LOGTO 2>&1; fi
else
  echo "Cache-Control: no-cache"
  echo "Last-Modified:" $($dateconv -i '%s' -f '%a, %d %b %Y %H:%M:%S %Z' $DATE)
  echo ""
  if [ -n ${output:-} ]; then
    echo "$output" | jq '.date='"${DATE}"
  else
    echo '{ "error": "not found" }'
  fi
fi

if [ -n ${DEBUG:-} ]; then echo $(date) "$0 $$ -- FINISH $QUERY_STRING" >> $LOGTO 2>&1; fi
